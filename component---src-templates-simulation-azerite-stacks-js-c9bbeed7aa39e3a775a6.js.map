{"version":3,"sources":["webpack:///component---src-templates-simulation-azerite-stacks-js-c9bbeed7aa39e3a775a6.js","webpack:///./src/browser/charts/azeritelevels.js","webpack:///./src/templates/simulation/azerite-stacks.js"],"names":["webpackJsonp","140","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","azeriteLevelsInit","undefined","_regenerator","_regenerator2","_promise","_promise2","_asyncToGenerator2","_asyncToGenerator3","_littleLoader","_ref","mark","_callee2","reportPath","chartTitle","templateDPS","google","drawChart","_this","this","wrap","_context2","prev","next","window","resolve","reject","_littleLoader2","err","_ref2","_callee","response","json","data","sortCol","row","biggestTotalValue","col","_col","_row","prevVal","prevAbsVal","_col2","curAbsVal","absStepVal","curVal","stepVal","tooltip","googleChartElement","content","contentWidth","chartWidth","bgColor","textColor","options","chart","_context","fetch","sent","visualization","arrayToDataTable","results","addColumn","getNumberOfRows","getValue","setValue","sort","column","desc","removeColumn","getNumberOfColumns","insertColumn","type","role","p","html","getColumnLabel","_common","formatNumber","toFixed","document","getElementById","parentElement","innerWidth","getComputedStyle","getPropertyValue","documentElement","clientWidth","title","backgroundColor","chartArea","top","bottom","right","left","hAxis","gridlines","count","format","textStyle","color","titleTextStyle","viewWindowMode","viewWindow","min","vAxis","fontSize","legend","isHtml","isStacked","width","BarChart","draw","excludeEmptyRows","removeLoading","initOverlay","stop","apply","arguments","charts","load","packages","setOnLoadCallback","_x","_x2","_x3","358","query","_classCallCheck2","_classCallCheck3","_possibleConstructorReturn2","_possibleConstructorReturn3","_inherits2","_inherits3","_react","_react2","_propTypes","_propTypes2","_reactHelmet","_reactHelmet2","_gatsbyLink","_gatsbyLink2","_react3","_Button","_Button2","_CircularProgress","_CircularProgress2","_azeritelevels","_googleAd","_googleAd2","AzeriteStacksSimulationTemplate","_React$Component","prototype","componentDidMount","_props","props","pathContext","reportsPath","site","siteMetadata","name","catch","console","error","render","_props2","location","fightStyle","createElement","rel","href","replace","RegExp","Trans","id","components","style","textAlign","allSitePage","edges","map","edge","index","node","nodeFightStyle","context","key","variant","disabled","component","Link","to","path","margin","height","React","Component","propTypes","classes","PropTypes","object"],"mappings":"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","file":"component---src-templates-simulation-azerite-stacks-js-c9bbeed7aa39e3a775a6.js","sourcesContent":["webpackJsonp([77738955667165],{\n\n/***/ 140:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\texports.azeriteLevelsInit = undefined;\n\t\n\tvar _regenerator = __webpack_require__(100);\n\t\n\tvar _regenerator2 = _interopRequireDefault(_regenerator);\n\t\n\tvar _promise = __webpack_require__(54);\n\t\n\tvar _promise2 = _interopRequireDefault(_promise);\n\t\n\tvar _asyncToGenerator2 = __webpack_require__(99);\n\t\n\tvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\t\n\tvar azeriteLevelsInit = exports.azeriteLevelsInit = function () {\n\t  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(reportPath, chartTitle, templateDPS) {\n\t    var _this = this;\n\t\n\t    var google, drawChart;\n\t    return _regenerator2.default.wrap(function _callee2$(_context2) {\n\t      while (1) {\n\t        switch (_context2.prev = _context2.next) {\n\t          case 0:\n\t            if (window.google) {\n\t              _context2.next = 3;\n\t              break;\n\t            }\n\t\n\t            _context2.next = 3;\n\t            return new _promise2.default(function (resolve, reject) {\n\t              (0, _littleLoader2.default)('https://www.gstatic.com/charts/loader.js', function (err) {\n\t                if (err) reject(err);\n\t                resolve();\n\t              });\n\t            });\n\t\n\t          case 3:\n\t            google = window.google;\n\t\n\t            drawChart = function () {\n\t              var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {\n\t                var response, json, data, sortCol, row, biggestTotalValue, col, _col, _row, prevVal, prevAbsVal, _col2, curAbsVal, absStepVal, curVal, stepVal, tooltip, googleChartElement, content, contentWidth, chartWidth, bgColor, textColor, options, chart;\n\t\n\t                return _regenerator2.default.wrap(function _callee$(_context) {\n\t                  while (1) {\n\t                    switch (_context.prev = _context.next) {\n\t                      case 0:\n\t                        _context.next = 2;\n\t                        return window.fetch(reportPath + '.json');\n\t\n\t                      case 2:\n\t                        response = _context.sent;\n\t                        _context.next = 5;\n\t                        return response.json();\n\t\n\t                      case 5:\n\t                        json = _context.sent;\n\t                        data = new google.visualization.arrayToDataTable(json.results);\n\t\n\t                        // Sorting\n\t\n\t                        sortCol = data.addColumn('number');\n\t\n\t                        for (row = 0; row < data.getNumberOfRows(); row++) {\n\t                          biggestTotalValue = 0;\n\t\n\t                          for (col = 1; col < sortCol; col++) {\n\t                            if (data.getValue(row, col) > biggestTotalValue) {\n\t                              biggestTotalValue = data.getValue(row, col);\n\t                            }\n\t                          }\n\t                          data.setValue(row, sortCol, biggestTotalValue);\n\t                        }\n\t                        data.sort([{ column: sortCol, desc: true }]);\n\t                        data.removeColumn(sortCol);\n\t\n\t                        // Add Tooltip columns\n\t                        for (_col = 2; _col <= data.getNumberOfColumns(); _col += 2) {\n\t                          data.insertColumn(_col, { type: 'string', role: 'tooltip', 'p': { 'html': true } });\n\t                        }\n\t\n\t                        // Calculate Differences\n\t                        for (_row = 0; _row < data.getNumberOfRows(); _row++) {\n\t                          prevVal = 0;\n\t                          prevAbsVal = 0;\n\t\n\t                          for (_col2 = 1; _col2 < data.getNumberOfColumns(); _col2 += 2) {\n\t                            curAbsVal = data.getValue(_row, _col2);\n\t                            absStepVal = curAbsVal - prevAbsVal;\n\t                            curVal = 100 * ((templateDPS + curAbsVal) / templateDPS - 1);\n\t                            stepVal = curVal - prevVal;\n\t                            tooltip = '\\n        <div class=\"chart-tooltip\">\\n          <b>' + data.getValue(_row, 0) + '<br/> Item Level ' + data.getColumnLabel(_col2) + '</b><br/>\\n          <b>Total:</b> ' + (0, _common.formatNumber)(curVal.toFixed(2)) + ' % (' + (0, _common.formatNumber)(curAbsVal.toFixed()) + ')<br/>\\n          <b>Increase:</b> ' + (0, _common.formatNumber)(stepVal.toFixed(2)) + '% (' + (0, _common.formatNumber)(absStepVal.toFixed()) + ' )\\n        </div>';\n\t\n\t                            data.setValue(_row, _col2 + 1, tooltip);\n\t                            data.setValue(_row, _col2, stepVal);\n\t                            prevVal = curVal > prevVal ? curVal : prevVal;\n\t                            prevAbsVal = curAbsVal > prevAbsVal ? curAbsVal : prevAbsVal;\n\t                          }\n\t                        }\n\t\n\t                        // Get content width (to force a min-width on mobile, can't do it in css because of the overflow)\n\t                        googleChartElement = document.getElementById('google-chart');\n\t                        content = googleChartElement.parentElement;\n\t                        contentWidth = content.innerWidth - window.getComputedStyle(content, null).getPropertyValue('padding-left') * 2;\n\t\n\t                        // Set chart options\n\t\n\t                        chartWidth = document.documentElement.clientWidth >= 768 ? contentWidth : 700;\n\t                        bgColor = '#303030';\n\t                        textColor = '#ffffff';\n\t                        options = {\n\t                          title: chartTitle,\n\t                          backgroundColor: bgColor,\n\t                          chartArea: {\n\t                            top: 50,\n\t                            bottom: 100,\n\t                            right: 150,\n\t                            left: 200\n\t                          },\n\t                          hAxis: {\n\t                            gridlines: {\n\t                              count: 20\n\t                            },\n\t                            format: '#.#\\'%\\'',\n\t                            textStyle: {\n\t                              color: textColor\n\t                            },\n\t                            title: '% DPS Gain',\n\t                            titleTextStyle: {\n\t                              color: textColor\n\t                            },\n\t                            viewWindowMode: 'maximized',\n\t                            viewWindow: {\n\t                              min: 0\n\t                            }\n\t                          },\n\t                          vAxis: {\n\t                            textStyle: {\n\t                              fontSize: 12,\n\t                              color: textColor\n\t                            },\n\t                            titleTextStyle: {\n\t                              color: textColor\n\t                            }\n\t                          },\n\t                          legend: {\n\t                            textStyle: {\n\t                              color: textColor\n\t                            }\n\t                          },\n\t                          titleTextStyle: {\n\t                            color: textColor\n\t                          },\n\t                          tooltip: {\n\t                            isHtml: true\n\t                          },\n\t                          isStacked: true,\n\t                          width: chartWidth\n\t\n\t                          // Instantiate and draw our chart, passing in some options.\n\t                        };\n\t                        chart = new google.visualization.BarChart(googleChartElement);\n\t\n\t                        chart.draw((0, _common.excludeEmptyRows)(data), options);\n\t                        (0, _common.removeLoading)();\n\t                        (0, _common.initOverlay)(options.chartArea);\n\t\n\t                      case 24:\n\t                      case 'end':\n\t                        return _context.stop();\n\t                    }\n\t                  }\n\t                }, _callee, _this);\n\t              }));\n\t\n\t              return function drawChart() {\n\t                return _ref2.apply(this, arguments);\n\t              };\n\t            }();\n\t\n\t            google.charts.load('current', { 'packages': ['corechart'] });\n\t            google.charts.setOnLoadCallback(drawChart);\n\t\n\t          case 7:\n\t          case 'end':\n\t            return _context2.stop();\n\t        }\n\t      }\n\t    }, _callee2, this);\n\t  }));\n\t\n\t  return function azeriteLevelsInit(_x, _x2, _x3) {\n\t    return _ref.apply(this, arguments);\n\t  };\n\t}();\n\t\n\tvar _littleLoader = __webpack_require__(118);\n\t\n\tvar _littleLoader2 = _interopRequireDefault(_littleLoader);\n\t\n\tvar _common = __webpack_require__(96);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/***/ }),\n\n/***/ 358:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\texports.query = undefined;\n\t\n\tvar _classCallCheck2 = __webpack_require__(20);\n\t\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\t\n\tvar _possibleConstructorReturn2 = __webpack_require__(25);\n\t\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\t\n\tvar _inherits2 = __webpack_require__(24);\n\t\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\t\n\tvar _react = __webpack_require__(3);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _propTypes = __webpack_require__(4);\n\t\n\tvar _propTypes2 = _interopRequireDefault(_propTypes);\n\t\n\tvar _reactHelmet = __webpack_require__(40);\n\t\n\tvar _reactHelmet2 = _interopRequireDefault(_reactHelmet);\n\t\n\tvar _gatsbyLink = __webpack_require__(34);\n\t\n\tvar _gatsbyLink2 = _interopRequireDefault(_gatsbyLink);\n\t\n\tvar _react3 = __webpack_require__(41);\n\t\n\tvar _Button = __webpack_require__(89);\n\t\n\tvar _Button2 = _interopRequireDefault(_Button);\n\t\n\tvar _CircularProgress = __webpack_require__(90);\n\t\n\tvar _CircularProgress2 = _interopRequireDefault(_CircularProgress);\n\t\n\tvar _azeritelevels = __webpack_require__(140);\n\t\n\tvar _googleAd = __webpack_require__(53);\n\t\n\tvar _googleAd2 = _interopRequireDefault(_googleAd);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar styles = function styles(theme) {\n\t  return {};\n\t};\n\t\n\tvar AzeriteStacksSimulationTemplate = function (_React$Component) {\n\t  (0, _inherits3.default)(AzeriteStacksSimulationTemplate, _React$Component);\n\t\n\t  function AzeriteStacksSimulationTemplate() {\n\t    (0, _classCallCheck3.default)(this, AzeriteStacksSimulationTemplate);\n\t    return (0, _possibleConstructorReturn3.default)(this, _React$Component.apply(this, arguments));\n\t  }\n\t\n\t  AzeriteStacksSimulationTemplate.prototype.componentDidMount = function componentDidMount() {\n\t    var _props = this.props,\n\t        data = _props.data,\n\t        pathContext = _props.pathContext;\n\t    var reportsPath = data.site.siteMetadata.reportsPath;\n\t    var name = pathContext.name,\n\t        templateDPS = pathContext.templateDPS;\n\t\n\t    (0, _azeritelevels.azeriteLevelsInit)('' + reportsPath + name, 'Azerite Powers % DPS Gain per Stacks', templateDPS).catch(function (err) {\n\t      console.error(err);\n\t    });\n\t  };\n\t\n\t  AzeriteStacksSimulationTemplate.prototype.render = function render() {\n\t    var _props2 = this.props,\n\t        data = _props2.data,\n\t        location = _props2.location,\n\t        pathContext = _props2.pathContext;\n\t    var reportsPath = data.site.siteMetadata.reportsPath;\n\t    var name = pathContext.name,\n\t        fightStyle = pathContext.fightStyle;\n\t\n\t    return _react2.default.createElement(\n\t      'div',\n\t      null,\n\t      _react2.default.createElement(\n\t        _reactHelmet2.default,\n\t        null,\n\t        _react2.default.createElement('link', { rel: 'prefetch', href: '' + reportsPath + name + '.json' })\n\t      ),\n\t      _react2.default.createElement(\n\t        'h1',\n\t        null,\n\t        name.replace(new RegExp('_', 'g'), ' ').replace(new RegExp('-', 'g'), ' ')\n\t      ),\n\t      _react2.default.createElement(\n\t        'p',\n\t        null,\n\t        _react2.default.createElement(_react3.Trans, {\n\t          id: 'Here, you can compare expected DPS increase from azerite powers.'\n\t        })\n\t      ),\n\t      _react2.default.createElement(\n\t        'p',\n\t        null,\n\t        _react2.default.createElement(_react3.Trans, {\n\t          id: 'In order to compare azerite powers with this chart, look for the end of the bars corresponding to the item level of interest. However, you should <0>simulate your own character</0> to find your best setup. These simulations are based on predefined gear sets instead of your own, after all. This means data shown here <1>depends heavily</1> on the used profile with its talents, its gear, etc. and is rather giving an outlook. If your character is different from the setup used here, personal simulations are recommended.',\n\t          components: [_react2.default.createElement('b', null), _react2.default.createElement('b', null)]\n\t        })\n\t      ),\n\t      _react2.default.createElement(\n\t        'div',\n\t        { style: { textAlign: 'center' } },\n\t        data.allSitePage.edges.map(function (edge, index) {\n\t          var node = edge.node;\n\t          var nodeFightStyle = node.context.fightStyle;\n\t\n\t          return _react2.default.createElement(\n\t            _Button2.default,\n\t            { key: index, variant: 'contained', color: 'primary', disabled: fightStyle === nodeFightStyle,\n\t              component: _gatsbyLink2.default, to: node.path, style: { margin: 8 } },\n\t            nodeFightStyle\n\t          );\n\t        })\n\t      ),\n\t      _react2.default.createElement(_googleAd2.default, { location: location, type: 'inarticle' }),\n\t      _react2.default.createElement(_CircularProgress2.default, { id: 'results-loader', color: 'secondary' }),\n\t      _react2.default.createElement('div', { id: 'chart-overlay' }),\n\t      _react2.default.createElement('div', { id: 'google-chart', style: { height: 1200, width: '100%' } })\n\t    );\n\t  };\n\t\n\t  return AzeriteStacksSimulationTemplate;\n\t}(_react2.default.Component);\n\t\n\tAzeriteStacksSimulationTemplate.propTypes = {\n\t  classes: _propTypes2.default.object,\n\t  data: _propTypes2.default.object,\n\t  pathContext: _propTypes2.default.object,\n\t  location: _propTypes2.default.object\n\t};\n\t\n\texports.default = AzeriteStacksSimulationTemplate;\n\tvar query = exports.query = '** extracted graphql fragment **';\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// component---src-templates-simulation-azerite-stacks-js-c9bbeed7aa39e3a775a6.js","import load from 'little-loader'\nimport { formatNumber, excludeEmptyRows, removeLoading, initOverlay } from './common'\n\nexport async function azeriteLevelsInit (reportPath, chartTitle, templateDPS) {\n  if (!window.google) {\n    await new Promise((resolve, reject) => {\n      load('https://www.gstatic.com/charts/loader.js', (err) => {\n        if (err) reject(err)\n        resolve()\n      })\n    })\n  }\n\n  const google = window.google\n\n  const drawChart = async () => {\n    const response = await window.fetch(`${reportPath}.json`)\n    const json = await response.json()\n    const data = new google.visualization.arrayToDataTable(json.results)\n\n    // Sorting\n    const sortCol = data.addColumn('number')\n    for (let row = 0; row < data.getNumberOfRows(); row++) {\n      let biggestTotalValue = 0\n      for (let col = 1; col < sortCol; col++) {\n        if (data.getValue(row, col) > biggestTotalValue) { biggestTotalValue = data.getValue(row, col) }\n      }\n      data.setValue(row, sortCol, biggestTotalValue)\n    }\n    data.sort([{column: sortCol, desc: true}])\n    data.removeColumn(sortCol)\n\n    // Add Tooltip columns\n    for (let col = 2; col <= data.getNumberOfColumns(); col += 2) {\n      data.insertColumn(col, {type: 'string', role: 'tooltip', 'p': {'html': true}})\n    }\n\n    // Calculate Differences\n    for (let row = 0; row < data.getNumberOfRows(); row++) {\n      let prevVal = 0\n      let prevAbsVal = 0\n      for (let col = 1; col < data.getNumberOfColumns(); col += 2) {\n        const curAbsVal = data.getValue(row, col)\n        const absStepVal = curAbsVal - prevAbsVal\n        const curVal = 100 * ((templateDPS + curAbsVal) / templateDPS - 1)\n        const stepVal = curVal - prevVal\n        const tooltip = `\n        <div class=\"chart-tooltip\">\n          <b>${data.getValue(row, 0)}<br/> Item Level ${data.getColumnLabel(col)}</b><br/>\n          <b>Total:</b> ${formatNumber(curVal.toFixed(2))} % (${formatNumber(curAbsVal.toFixed())})<br/>\n          <b>Increase:</b> ${formatNumber(stepVal.toFixed(2))}% (${formatNumber(absStepVal.toFixed())} )\n        </div>`\n        data.setValue(row, col + 1, tooltip)\n        data.setValue(row, col, stepVal)\n        prevVal = curVal > prevVal ? curVal : prevVal\n        prevAbsVal = curAbsVal > prevAbsVal ? curAbsVal : prevAbsVal\n      }\n    }\n\n    // Get content width (to force a min-width on mobile, can't do it in css because of the overflow)\n    const googleChartElement = document.getElementById('google-chart')\n    const content = googleChartElement.parentElement\n    const contentWidth = content.innerWidth - window.getComputedStyle(content, null).getPropertyValue('padding-left') * 2\n\n    // Set chart options\n    const chartWidth = document.documentElement.clientWidth >= 768 ? contentWidth : 700\n    const bgColor = '#303030'\n    const textColor = '#ffffff'\n    const options = {\n      title: chartTitle,\n      backgroundColor: bgColor,\n      chartArea: {\n        top: 50,\n        bottom: 100,\n        right: 150,\n        left: 200\n      },\n      hAxis: {\n        gridlines: {\n          count: 20\n        },\n        format: '#.#\\'%\\'',\n        textStyle: {\n          color: textColor\n        },\n        title: '% DPS Gain',\n        titleTextStyle: {\n          color: textColor\n        },\n        viewWindowMode: 'maximized',\n        viewWindow: {\n          min: 0\n        }\n      },\n      vAxis: {\n        textStyle: {\n          fontSize: 12,\n          color: textColor\n        },\n        titleTextStyle: {\n          color: textColor\n        }\n      },\n      legend: {\n        textStyle: {\n          color: textColor\n        }\n      },\n      titleTextStyle: {\n        color: textColor\n      },\n      tooltip: {\n        isHtml: true\n      },\n      isStacked: true,\n      width: chartWidth\n    }\n\n    // Instantiate and draw our chart, passing in some options.\n    const chart = new google.visualization.BarChart(googleChartElement)\n    chart.draw(excludeEmptyRows(data), options)\n    removeLoading()\n    initOverlay(options.chartArea)\n  }\n\n  google.charts.load('current', {'packages': ['corechart']})\n  google.charts.setOnLoadCallback(drawChart)\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/browser/charts/azeritelevels.js","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport Link from 'gatsby-link'\nimport { Trans } from '@lingui/react'\nimport Button from '@material-ui/core/Button'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport { azeriteLevelsInit } from '../../browser/charts/azeritelevels'\nimport GoogleAd from '../../components/google-ad'\n\nconst styles = (theme) => ({})\n\nclass AzeriteStacksSimulationTemplate extends React.Component {\n  componentDidMount () {\n    const {data, pathContext} = this.props\n    const {reportsPath} = data.site.siteMetadata\n    const {name, templateDPS} = pathContext\n    azeriteLevelsInit(`${reportsPath}${name}`, 'Azerite Powers % DPS Gain per Stacks', templateDPS)\n      .catch((err) => { console.error(err) })\n  }\n\n  render () {\n    const {data, location, pathContext} = this.props\n    const {reportsPath} = data.site.siteMetadata\n    const {name, fightStyle} = pathContext\n    return (\n      <div>\n        <Helmet>\n          <link rel=\"prefetch\" href={`${reportsPath}${name}.json`}/>\n        </Helmet>\n        <h1>{name.replace(new RegExp('_', 'g'), ' ').replace(new RegExp('-', 'g'), ' ')}</h1>\n        <p><Trans>Here, you can compare expected DPS increase from azerite powers.</Trans></p>\n        <p><Trans>In order to compare azerite powers with this chart, look for the end of the bars corresponding to the\n          item\n          level of interest. However, you should <b>simulate your own character</b> to find your best setup. These\n          simulations are based on predefined gear sets instead of your own, after all. This means data shown here <b>depends\n            heavily</b> on the used profile with its talents, its gear, etc. and is rather giving an outlook. If your\n          character is different from the setup used here, personal simulations are recommended.</Trans></p>\n        <div style={{textAlign: 'center'}}>\n          {\n            data.allSitePage.edges.map((edge, index) => {\n              const {node} = edge\n              const {fightStyle: nodeFightStyle} = node.context\n              return (\n                <Button key={index} variant=\"contained\" color=\"primary\" disabled={fightStyle === nodeFightStyle}\n                  component={Link} to={node.path} style={{margin: 8}}>\n                  {nodeFightStyle}\n                </Button>\n              )\n            })\n          }\n        </div>\n        <GoogleAd location={location} type=\"inarticle\"/>\n        <CircularProgress id=\"results-loader\" color=\"secondary\"/>\n        <div id=\"chart-overlay\"/>\n        <div id=\"google-chart\" style={{height: 1200, width: '100%'}}/>\n      </div>\n    )\n  }\n}\n\nAzeriteStacksSimulationTemplate.propTypes = {\n  classes: PropTypes.object,\n  data: PropTypes.object,\n  pathContext: PropTypes.object,\n  location: PropTypes.object\n}\n\nexport default AzeriteStacksSimulationTemplate\n\nexport const query = graphql`\n  query AzeriteStacksSimulation($lang: String!, $wowClass: String!, $spec: String!, $simulationType: String!, $tier: String!, $variation: String!) {\n    site {\n      siteMetadata {\n        reportsPath\n      }\n    }\n    allSitePage(filter: {context: {lang: {eq: $lang}, wowClass: {eq: $wowClass}, spec: {eq: $spec}, simulationType: {eq: $simulationType}, tier: {eq: $tier}, variation: {eq: $variation}}}) {\n      edges {\n        node {\n          path\n          context {\n            fightStyle\n          }\n        }\n      }\n    }\n  }\n`\n\n\n\n// WEBPACK FOOTER //\n// ./src/templates/simulation/azerite-stacks.js"],"sourceRoot":""}