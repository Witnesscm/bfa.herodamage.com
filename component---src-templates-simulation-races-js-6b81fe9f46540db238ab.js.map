{"version":3,"sources":["webpack:///component---src-templates-simulation-races-js-6b81fe9f46540db238ab.js","webpack:///./src/browser/charts/races.js","webpack:///./src/templates/simulation/races.js"],"names":["webpackJsonp","348","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","racesInit","undefined","_regenerator","_regenerator2","_promise","_promise2","_asyncToGenerator2","_asyncToGenerator3","_littleLoader","_ref","mark","_callee2","reportPath","chartTitle","templateDPS","google","drawChart","_this","this","wrap","_context2","prev","next","window","resolve","reject","_littleLoader2","err","_ref2","_callee","response","json","data","AllianceRaces","HordeRaces","row","raceStyle","rowName","curAbsVal","curVal","tooltip","googleChartElement","content","contentWidth","chartWidth","bgColor","textColor","options","chart","_context","fetch","sent","visualization","arrayToDataTable","results","sort","column","desc","insertColumn","type","role","p","html","getNumberOfRows","getValue","includes","_common","formatNumber","toFixed","setValue","document","getElementById","parentElement","innerWidth","getComputedStyle","getPropertyValue","documentElement","clientWidth","title","backgroundColor","chartArea","top","bottom","left","right","hAxis","gridlines","count","format","textStyle","color","titleTextStyle","viewWindowMode","viewWindow","min","vAxis","fontSize","annotations","highContrast","stem","length","fontName","bold","auraColor","isHtml","legend","position","isStacked","width","BarChart","draw","excludeEmptyRows","removeLoading","initOverlay","stop","apply","arguments","charts","load","packages","setOnLoadCallback","_x","_x2","_x3","364","query","_classCallCheck2","_classCallCheck3","_possibleConstructorReturn2","_possibleConstructorReturn3","_inherits2","_inherits3","_react","_react2","_propTypes","_propTypes2","_reactHelmet","_reactHelmet2","_gatsbyLink","_gatsbyLink2","_react3","_Button","_Button2","_CircularProgress","_CircularProgress2","_races","_googleAd","_googleAd2","RacesSimulationTemplate","_React$Component","prototype","componentDidMount","_props","props","pathContext","reportsPath","site","siteMetadata","name","console","error","render","_props2","location","fightStyle","createElement","rel","href","replace","RegExp","Trans","id","style","textAlign","allSitePage","edges","map","edge","index","node","nodeFightStyle","context","key","variant","disabled","component","Link","to","path","margin","height","React","Component","propTypes","classes","PropTypes","object"],"mappings":"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","file":"component---src-templates-simulation-races-js-6b81fe9f46540db238ab.js","sourcesContent":["webpackJsonp([131131757573039],{\n\n/***/ 348:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\texports.racesInit = undefined;\n\t\n\tvar _regenerator = __webpack_require__(105);\n\t\n\tvar _regenerator2 = _interopRequireDefault(_regenerator);\n\t\n\tvar _promise = __webpack_require__(56);\n\t\n\tvar _promise2 = _interopRequireDefault(_promise);\n\t\n\tvar _asyncToGenerator2 = __webpack_require__(104);\n\t\n\tvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\t\n\tvar racesInit = exports.racesInit = function () {\n\t  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(reportPath, chartTitle, templateDPS) {\n\t    var _this = this;\n\t\n\t    var google, drawChart;\n\t    return _regenerator2.default.wrap(function _callee2$(_context2) {\n\t      while (1) {\n\t        switch (_context2.prev = _context2.next) {\n\t          case 0:\n\t            if (window.google) {\n\t              _context2.next = 3;\n\t              break;\n\t            }\n\t\n\t            _context2.next = 3;\n\t            return new _promise2.default(function (resolve, reject) {\n\t              (0, _littleLoader2.default)('https://www.gstatic.com/charts/loader.js', function (err) {\n\t                if (err) reject(err);\n\t                resolve();\n\t              });\n\t            });\n\t\n\t          case 3:\n\t            google = window.google;\n\t\n\t            drawChart = function () {\n\t              var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {\n\t                var response, json, data, AllianceRaces, HordeRaces, row, raceStyle, rowName, curAbsVal, curVal, tooltip, googleChartElement, content, contentWidth, chartWidth, bgColor, textColor, options, chart;\n\t                return _regenerator2.default.wrap(function _callee$(_context) {\n\t                  while (1) {\n\t                    switch (_context.prev = _context.next) {\n\t                      case 0:\n\t                        _context.next = 2;\n\t                        return window.fetch(reportPath + '.json');\n\t\n\t                      case 2:\n\t                        response = _context.sent;\n\t                        _context.next = 5;\n\t                        return response.json();\n\t\n\t                      case 5:\n\t                        json = _context.sent;\n\t                        data = new google.visualization.arrayToDataTable(json.results);\n\t\n\t                        // Sort\n\t\n\t                        data.sort({ column: 1, desc: true });\n\t\n\t                        // Add Tooltip and Style column\n\t                        data.insertColumn(2, { type: 'string', role: 'tooltip', 'p': { 'html': true } });\n\t                        data.insertColumn(3, { type: 'string', role: 'style' });\n\t\n\t                        AllianceRaces = ['Human', 'Dwarf', 'Night Elf', 'Gnome', 'Worgen', 'Draenei', 'Lightforged Draenei', 'Void Elf'];\n\t                        HordeRaces = ['Orc', 'Troll', 'Tauren', 'Goblin', 'Undead', 'Blood Elf', 'Highmountain Tauren', 'Nightborne'];\n\t\n\t                        // Process data\n\t\n\t                        for (row = 0; row < data.getNumberOfRows(); row++) {\n\t                          raceStyle = '';\n\t                          rowName = data.getValue(row, 0);\n\t\n\t                          if (AllianceRaces.includes(rowName)) {\n\t                            raceStyle = 'stroke-width: 3; stroke-color: #1144AA; color: #3366CC';\n\t                          } else if (HordeRaces.includes(rowName)) {\n\t                            raceStyle = 'stroke-width: 3; stroke-color: #770000; color: #AA0000';\n\t                          } else {\n\t                            raceStyle = 'stroke-width: 3; stroke-color: #4d4d4d; color: #808080';\n\t                          }\n\t                          curAbsVal = data.getValue(row, 1);\n\t                          curVal = 100 * ((templateDPS + curAbsVal) / templateDPS - 1);\n\t                          tooltip = '\\n      <div class=\"chart-tooltip\">\\n          <b>' + rowName + '</b><br/>\\n          <b>Increase:</b> ' + (0, _common.formatNumber)(curVal.toFixed(2)) + '% (' + (0, _common.formatNumber)(curAbsVal) + ' )\\n      </div>';\n\t\n\t                          data.setValue(row, 3, raceStyle);\n\t                          data.setValue(row, 2, tooltip);\n\t                          data.setValue(row, 1, curVal);\n\t                        }\n\t\n\t                        // Get content width (to force a min-width on mobile, can't do it in css because of the overflow)\n\t                        googleChartElement = document.getElementById('google-chart');\n\t                        content = googleChartElement.parentElement;\n\t                        contentWidth = content.innerWidth - window.getComputedStyle(content, null).getPropertyValue('padding-left') * 2;\n\t\n\t                        // Set chart options\n\t\n\t                        chartWidth = document.documentElement.clientWidth >= 768 ? contentWidth : 700;\n\t                        bgColor = '#303030';\n\t                        textColor = '#ffffff';\n\t                        options = {\n\t                          title: chartTitle,\n\t                          backgroundColor: bgColor,\n\t                          chartArea: {\n\t                            top: 50,\n\t                            bottom: 100,\n\t                            left: 150,\n\t                            right: 50\n\t                          },\n\t                          hAxis: {\n\t                            gridlines: {\n\t                              count: 20\n\t                            },\n\t                            format: '#.#\\'%\\'',\n\t                            textStyle: {\n\t                              color: textColor\n\t                            },\n\t                            title: '% DPS Gain',\n\t                            titleTextStyle: {\n\t                              color: textColor\n\t                            },\n\t                            viewWindowMode: 'maximized',\n\t                            viewWindow: {\n\t                              min: 0\n\t                            }\n\t                          },\n\t                          vAxis: {\n\t                            textStyle: {\n\t                              fontSize: 12,\n\t                              color: textColor\n\t                            },\n\t                            titleTextStyle: {\n\t                              color: textColor\n\t                            }\n\t                          },\n\t                          annotations: {\n\t                            highContrast: false,\n\t                            stem: {\n\t                              color: 'transparent',\n\t                              length: -12\n\t                            },\n\t                            textStyle: {\n\t                              fontName: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n\t                              fontSize: '0.875rem',\n\t                              bold: true,\n\t                              color: bgColor,\n\t                              auraColor: 'transparent'\n\t                            }\n\t                          },\n\t                          titleTextStyle: {\n\t                            color: textColor\n\t                          },\n\t                          tooltip: {\n\t                            isHtml: true\n\t                          },\n\t                          legend: {\n\t                            position: 'none'\n\t                          },\n\t                          isStacked: true,\n\t                          width: chartWidth\n\t\n\t                          // Instantiate and draw our chart, passing in some options.\n\t                        };\n\t                        chart = new google.visualization.BarChart(googleChartElement);\n\t\n\t                        chart.draw((0, _common.excludeEmptyRows)(data), options);\n\t                        (0, _common.removeLoading)();\n\t                        (0, _common.initOverlay)(options.chartArea);\n\t\n\t                      case 24:\n\t                      case 'end':\n\t                        return _context.stop();\n\t                    }\n\t                  }\n\t                }, _callee, _this);\n\t              }));\n\t\n\t              return function drawChart() {\n\t                return _ref2.apply(this, arguments);\n\t              };\n\t            }();\n\t\n\t            google.charts.load('current', { 'packages': ['corechart'] });\n\t            google.charts.setOnLoadCallback(drawChart);\n\t\n\t          case 7:\n\t          case 'end':\n\t            return _context2.stop();\n\t        }\n\t      }\n\t    }, _callee2, this);\n\t  }));\n\t\n\t  return function racesInit(_x, _x2, _x3) {\n\t    return _ref.apply(this, arguments);\n\t  };\n\t}();\n\t\n\tvar _littleLoader = __webpack_require__(123);\n\t\n\tvar _littleLoader2 = _interopRequireDefault(_littleLoader);\n\t\n\tvar _common = __webpack_require__(101);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/***/ }),\n\n/***/ 364:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\texports.query = undefined;\n\t\n\tvar _classCallCheck2 = __webpack_require__(20);\n\t\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\t\n\tvar _possibleConstructorReturn2 = __webpack_require__(24);\n\t\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\t\n\tvar _inherits2 = __webpack_require__(23);\n\t\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\t\n\tvar _react = __webpack_require__(3);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _propTypes = __webpack_require__(4);\n\t\n\tvar _propTypes2 = _interopRequireDefault(_propTypes);\n\t\n\tvar _reactHelmet = __webpack_require__(40);\n\t\n\tvar _reactHelmet2 = _interopRequireDefault(_reactHelmet);\n\t\n\tvar _gatsbyLink = __webpack_require__(28);\n\t\n\tvar _gatsbyLink2 = _interopRequireDefault(_gatsbyLink);\n\t\n\tvar _react3 = __webpack_require__(41);\n\t\n\tvar _Button = __webpack_require__(94);\n\t\n\tvar _Button2 = _interopRequireDefault(_Button);\n\t\n\tvar _CircularProgress = __webpack_require__(95);\n\t\n\tvar _CircularProgress2 = _interopRequireDefault(_CircularProgress);\n\t\n\tvar _races = __webpack_require__(348);\n\t\n\tvar _googleAd = __webpack_require__(55);\n\t\n\tvar _googleAd2 = _interopRequireDefault(_googleAd);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar styles = function styles(theme) {\n\t  return {};\n\t};\n\t\n\tvar RacesSimulationTemplate = function (_React$Component) {\n\t  (0, _inherits3.default)(RacesSimulationTemplate, _React$Component);\n\t\n\t  function RacesSimulationTemplate() {\n\t    (0, _classCallCheck3.default)(this, RacesSimulationTemplate);\n\t    return (0, _possibleConstructorReturn3.default)(this, _React$Component.apply(this, arguments));\n\t  }\n\t\n\t  RacesSimulationTemplate.prototype.componentDidMount = function componentDidMount() {\n\t    var _props = this.props,\n\t        data = _props.data,\n\t        pathContext = _props.pathContext;\n\t    var reportsPath = data.site.siteMetadata.reportsPath;\n\t    var name = pathContext.name,\n\t        templateDPS = pathContext.templateDPS;\n\t\n\t    try {\n\t      (0, _races.racesInit)('' + reportsPath + name, 'Race % DPS Gain', templateDPS);\n\t    } catch (err) {\n\t      console.error(err);\n\t    }\n\t  };\n\t\n\t  RacesSimulationTemplate.prototype.render = function render() {\n\t    var _props2 = this.props,\n\t        data = _props2.data,\n\t        location = _props2.location,\n\t        pathContext = _props2.pathContext;\n\t    var reportsPath = data.site.siteMetadata.reportsPath;\n\t    var name = pathContext.name,\n\t        fightStyle = pathContext.fightStyle;\n\t\n\t    return _react2.default.createElement(\n\t      'div',\n\t      null,\n\t      _react2.default.createElement(\n\t        _reactHelmet2.default,\n\t        null,\n\t        _react2.default.createElement('link', { rel: 'prefetch', href: '' + reportsPath + name + '.json' })\n\t      ),\n\t      _react2.default.createElement(\n\t        'h1',\n\t        null,\n\t        name.replace(new RegExp('_', 'g'), ' ').replace(new RegExp('-', 'g'), ' ')\n\t      ),\n\t      _react2.default.createElement(\n\t        'p',\n\t        null,\n\t        _react2.default.createElement(_react3.Trans, {\n\t          id: 'If you are interested in how the different races in World of Warcraft compare for this build, you can check out the following chart. However, keep in mind that race differences are usually rather small and can change with balance and gameplay changes. You can always play the race you want to play and don&apos,t have to feel compelled to choose based on this chart.'\n\t        })\n\t      ),\n\t      _react2.default.createElement(\n\t        'div',\n\t        { style: { textAlign: 'center' } },\n\t        data.allSitePage.edges.map(function (edge, index) {\n\t          var node = edge.node;\n\t          var nodeFightStyle = node.context.fightStyle;\n\t\n\t          return _react2.default.createElement(\n\t            _Button2.default,\n\t            { key: index, variant: 'contained', color: 'primary', disabled: fightStyle === nodeFightStyle,\n\t              component: _gatsbyLink2.default, to: node.path, style: { margin: 8 } },\n\t            nodeFightStyle\n\t          );\n\t        })\n\t      ),\n\t      _react2.default.createElement(_googleAd2.default, { location: location, type: 'inarticle' }),\n\t      _react2.default.createElement(_CircularProgress2.default, { id: 'results-loader', color: 'secondary' }),\n\t      _react2.default.createElement('div', { id: 'chart-overlay' }),\n\t      _react2.default.createElement('div', { id: 'google-chart', style: { height: 500, width: '100%' } })\n\t    );\n\t  };\n\t\n\t  return RacesSimulationTemplate;\n\t}(_react2.default.Component);\n\t\n\tRacesSimulationTemplate.propTypes = {\n\t  classes: _propTypes2.default.object,\n\t  data: _propTypes2.default.object,\n\t  pathContext: _propTypes2.default.object,\n\t  location: _propTypes2.default.object\n\t};\n\t\n\texports.default = RacesSimulationTemplate;\n\tvar query = exports.query = '** extracted graphql fragment **';\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// component---src-templates-simulation-races-js-6b81fe9f46540db238ab.js","import load from 'little-loader'\nimport { formatNumber, excludeEmptyRows, removeLoading, initOverlay } from './common'\n\nexport async function racesInit (reportPath, chartTitle, templateDPS) {\n  if (!window.google) {\n    await new Promise((resolve, reject) => {\n      load('https://www.gstatic.com/charts/loader.js', (err) => {\n        if (err) reject(err)\n        resolve()\n      })\n    })\n  }\n\n  const google = window.google\n\n  const drawChart = async () => {\n    const response = await window.fetch(`${reportPath}.json`)\n    const json = await response.json()\n    const data = new google.visualization.arrayToDataTable(json.results)\n\n    // Sort\n    data.sort({column: 1, desc: true})\n\n    // Add Tooltip and Style column\n    data.insertColumn(2, {type: 'string', role: 'tooltip', 'p': {'html': true}})\n    data.insertColumn(3, {type: 'string', role: 'style'})\n\n    const AllianceRaces = ['Human', 'Dwarf', 'Night Elf', 'Gnome', 'Worgen', 'Draenei', 'Lightforged Draenei', 'Void Elf']\n    const HordeRaces = ['Orc', 'Troll', 'Tauren', 'Goblin', 'Undead', 'Blood Elf', 'Highmountain Tauren', 'Nightborne']\n\n    // Process data\n    for (let row = 0; row < data.getNumberOfRows(); row++) {\n      let raceStyle = ''\n      const rowName = data.getValue(row, 0)\n      if (AllianceRaces.includes(rowName)) {\n        raceStyle = 'stroke-width: 3; stroke-color: #1144AA; color: #3366CC'\n      } else if (HordeRaces.includes(rowName)) {\n        raceStyle = 'stroke-width: 3; stroke-color: #770000; color: #AA0000'\n      } else {\n        raceStyle = 'stroke-width: 3; stroke-color: #4d4d4d; color: #808080'\n      }\n      const curAbsVal = data.getValue(row, 1)\n      const curVal = 100 * ((templateDPS + curAbsVal) / templateDPS - 1)\n      const tooltip = `\n      <div class=\"chart-tooltip\">\n          <b>${rowName}</b><br/>\n          <b>Increase:</b> ${formatNumber(curVal.toFixed(2))}% (${formatNumber(curAbsVal)} )\n      </div>`\n      data.setValue(row, 3, raceStyle)\n      data.setValue(row, 2, tooltip)\n      data.setValue(row, 1, curVal)\n    }\n\n    // Get content width (to force a min-width on mobile, can't do it in css because of the overflow)\n    const googleChartElement = document.getElementById('google-chart')\n    const content = googleChartElement.parentElement\n    const contentWidth = content.innerWidth - window.getComputedStyle(content, null).getPropertyValue('padding-left') * 2\n\n    // Set chart options\n    const chartWidth = document.documentElement.clientWidth >= 768 ? contentWidth : 700\n    const bgColor = '#303030'\n    const textColor = '#ffffff'\n    const options = {\n      title: chartTitle,\n      backgroundColor: bgColor,\n      chartArea: {\n        top: 50,\n        bottom: 100,\n        left: 150,\n        right: 50\n      },\n      hAxis: {\n        gridlines: {\n          count: 20\n        },\n        format: '#.#\\'%\\'',\n        textStyle: {\n          color: textColor\n        },\n        title: '% DPS Gain',\n        titleTextStyle: {\n          color: textColor\n        },\n        viewWindowMode: 'maximized',\n        viewWindow: {\n          min: 0\n        }\n      },\n      vAxis: {\n        textStyle: {\n          fontSize: 12,\n          color: textColor\n        },\n        titleTextStyle: {\n          color: textColor\n        }\n      },\n      annotations: {\n        highContrast: false,\n        stem: {\n          color: 'transparent',\n          length: -12\n        },\n        textStyle: {\n          fontName: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n          fontSize: '0.875rem',\n          bold: true,\n          color: bgColor,\n          auraColor: 'transparent'\n        }\n      },\n      titleTextStyle: {\n        color: textColor\n      },\n      tooltip: {\n        isHtml: true\n      },\n      legend: {\n        position: 'none'\n      },\n      isStacked: true,\n      width: chartWidth\n    }\n\n    // Instantiate and draw our chart, passing in some options.\n    const chart = new google.visualization.BarChart(googleChartElement)\n    chart.draw(excludeEmptyRows(data), options)\n    removeLoading()\n    initOverlay(options.chartArea)\n  }\n\n  google.charts.load('current', {'packages': ['corechart']})\n  google.charts.setOnLoadCallback(drawChart)\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/browser/charts/races.js","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport Link from 'gatsby-link'\nimport { Trans } from '@lingui/react'\nimport Button from '@material-ui/core/Button'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport { racesInit } from '../../browser/charts/races'\nimport GoogleAd from '../../components/google-ad'\n\nconst styles = (theme) => ({})\n\nclass RacesSimulationTemplate extends React.Component {\n  componentDidMount () {\n    const {data, pathContext} = this.props\n    const {reportsPath} = data.site.siteMetadata\n    const {name, templateDPS} = pathContext\n    try {\n      racesInit(`${reportsPath}${name}`, 'Race % DPS Gain', templateDPS)\n    } catch (err) {\n      console.error(err)\n    }\n  }\n\n  render () {\n    const {data, location, pathContext} = this.props\n    const {reportsPath} = data.site.siteMetadata\n    const {name, fightStyle} = pathContext\n    return (\n      <div>\n        <Helmet>\n          <link rel=\"prefetch\" href={`${reportsPath}${name}.json`}/>\n        </Helmet>\n        <h1>{name.replace(new RegExp('_', 'g'), ' ').replace(new RegExp('-', 'g'), ' ')}</h1>\n        <p><Trans>If you are interested in how the different races in World of Warcraft compare for this build, you can\n          check out the following chart. However, keep in mind that race differences are usually rather small and can\n          change with balance and gameplay changes. You can always play the race you want to play and don&apos,t have\n          to feel compelled to choose based on this chart.</Trans></p>\n        <div style={{textAlign: 'center'}}>\n          {\n            data.allSitePage.edges.map((edge, index) => {\n              const {node} = edge\n              const {fightStyle: nodeFightStyle} = node.context\n              return (\n                <Button key={index} variant=\"contained\" color=\"primary\" disabled={fightStyle === nodeFightStyle}\n                  component={Link} to={node.path} style={{margin: 8}}>\n                  {nodeFightStyle}\n                </Button>\n              )\n            })\n          }\n        </div>\n        <GoogleAd location={location} type=\"inarticle\"/>\n        <CircularProgress id=\"results-loader\" color=\"secondary\"/>\n        <div id=\"chart-overlay\"/>\n        <div id=\"google-chart\" style={{height: 500, width: '100%'}}/>\n      </div>\n    )\n  }\n}\n\nRacesSimulationTemplate.propTypes = {\n  classes: PropTypes.object,\n  data: PropTypes.object,\n  pathContext: PropTypes.object,\n  location: PropTypes.object\n}\n\nexport default RacesSimulationTemplate\n\nexport const query = graphql`\n  query RacesSimulation($lang: String!, $wowClass: String!, $spec: String!, $simulationType: String!, $tier: String!, $variation: String!) {\n    site {\n      siteMetadata {\n        reportsPath\n      }\n    }\n    allSitePage(filter: {context: {lang: {eq: $lang}, wowClass: {eq: $wowClass}, spec: {eq: $spec}, simulationType: {eq: $simulationType}, tier: {eq: $tier}, variation: {eq: $variation}}}) {\n      edges {\n        node {\n          path\n          context {\n            fightStyle\n          }\n        }\n      }\n    }\n  }\n`\n\n\n\n// WEBPACK FOOTER //\n// ./src/templates/simulation/races.js"],"sourceRoot":""}